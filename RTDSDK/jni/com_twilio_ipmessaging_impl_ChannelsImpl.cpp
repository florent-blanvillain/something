/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include "com_twilio_ipmessaging_impl_ChannelsImpl.h"
#include "TwilioIPMessagingClientContextDefines.h"

#include <twilio-jni/twilio-jni.h>
#include <android/log.h>

/*
 * Class:     com_twilio_ipmessaging_impl_ChannelsImpl
 * Method:    createChannelNative
 * Signature: (Ljava/lang/String;Lcom/twilio/ipmessaging/ChannelListener;)Lcom/twilio/ipmessaging/Message;
 */
JNIEXPORT jobject JNICALL Java_com_twilio_ipmessaging_impl_ChannelsImpl_createChannelNative
  (JNIEnv *env, jobject obj, jstring friendlyName, jobject listener) {

}

/*
 * Class:     com_twilio_ipmessaging_impl_ChannelsImpl
 * Method:    getChannelNative
 * Signature: (Ljava/lang/String;J)V
 */
JNIEXPORT jobject JNICALL Java_com_twilio_ipmessaging_impl_ChannelsImpl_getChannelNative
  (JNIEnv *env, jobject obj, jstring, jlong) {

}

/*
 * Class:     com_twilio_ipmessaging_impl_ChannelsImpl
 * Method:    getChannelsNative
 * Signature: (J)[Lcom/twilio/ipmessaging/Channel;
 */
JNIEXPORT jobjectArray JNICALL Java_com_twilio_ipmessaging_impl_ChannelsImpl_getChannelsNative
  (JNIEnv *env, jobject obj, jlong handle) {

	jobject channel;
	jobjectArray channelsArray ;

	jlong nativeChannelsContext = tw_jni_fetch_long(env, obj, "nativeChannelsHandler");

	LOGW( "Java_com_twilio_ipmessaging_impl_ChannelsImpl_getChannelsNative : Checking nativeChannelsContext.");

	if (nativeChannelsContext == 0) {
			LOGW("nativeChannelsContext is null");
			return nullptr;
	} else {

		ChannelsContext *channelsContextRecreate = reinterpret_cast<ChannelsContext *>(nativeChannelsContext);

		LOGW("client context is recreated.");

		if(channelsContextRecreate == nullptr) {
			LOGW( "Java_com_twilio_ipmessaging_impl_ChannelsImpl_getChannelsNative : channelsContextRecreate is NULL.");
			return 0;
		}

		if(channelsContextRecreate->channels == nullptr) {
			LOGW( "Java_com_twilio_ipmessaging_impl_ChannelsImpl_getChannelsNative : ITChannelsPtr is NULL.");
			return 0;
		}

		ITMChannelsPtr channels = channelsContextRecreate->channels;

		std::vector<ITMChannelPtr> channelsList;
		channels->getMyChannelsList(channelsList);

		std::vector<ITMChannelPtr> publicChannels;
		channels->getPublicChannelsList(publicChannels);

		LOGW("app: public channels count : %d",publicChannels.size());
		LOGW("app: my channels count : %d.", channelsList.size() );

		jclass java_channel_impl_cls = tw_jni_find_class(env, "com/twilio/ipmessaging/impl/ChannelImpl");
		if(java_channel_impl_cls != nullptr) {
			LOGW("Found java_channel_impl_cls class" );
		}

		jmethodID construct = tw_jni_get_method_by_class(env, java_channel_impl_cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;J)V");

		channelsArray = (jobjectArray) env->NewObjectArray(publicChannels.size(),java_channel_impl_cls, 0);

		for (int i= 0; i<publicChannels.size() ; i++ ) {
			ITMChannelPtr channelPtr = publicChannels[i];
			const char* sid = channelPtr->getSid().c_str();
			const char* name = channelPtr->getName().c_str();

			LOGW("Channel Name  : %s.", name );
			LOGW("Channel Sid %s", sid);

			ChannelContext* channelContext_ = new ChannelContext();
			channelContext_->channel = channelPtr;
			jlong channelContextHandle = reinterpret_cast<jlong>(channelContext_);


			jstring nameString = env->NewStringUTF(name);
			jstring sidString = env->NewStringUTF(sid);
			jlong channelHandle = (jlong)&channelPtr;

			//LOGW("INSERTING IN THE MAP %s", sid);
			//clientParams_->channelMap.insert( std::make_pair(sid, channelPtr));

			__android_log_print(ANDROID_LOG_VERBOSE, TAG,"The value of channelHandle %d", channelContextHandle);

			channel = tw_jni_new_object(env, java_channel_impl_cls, construct, nameString, sidString, channelContextHandle);
			LOGW("Created Channel Object.");
			env->SetObjectArrayElement(channelsArray, i, channel);
			LOGW("Added object to array");
		}

		if(channelsArray != nullptr) {
			LOGW("channelsArray is NOT NULL ");
		} else {
			LOGW("channelsArray is  NULL *********");
		}

	}

	return channelsArray ;

}


